
Milestone2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e7  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ed  00000000  00000000  00000a03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030b  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000013fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a8  00000000  00000000  00001474  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ed  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001909  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 4a 00 	jmp	0x94	; 0x94 <__vector_21>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 82 00 	call	0x104	; 0x104 <main>
  78:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <PWMinit>:
	OCR0A = 0; // Set TOP value to 0
}

// Sets the TOP register's value
void setPWM(int value){
	OCR0A = value;
  80:	56 9a       	sbi	0x0a, 6	; 10
  82:	8b e0       	ldi	r24, 0x0B	; 11
  84:	84 bd       	out	0x24, r24	; 36
  86:	84 b5       	in	r24, 0x24	; 36
  88:	80 68       	ori	r24, 0x80	; 128
  8a:	84 bd       	out	0x24, r24	; 36
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	85 bd       	out	0x25, r24	; 37
  90:	17 bc       	out	0x27, r1	; 39
  92:	08 95       	ret

00000094 <__vector_21>:
}

// Sets the PWM duty cycle to the value of the ADC0, when every conversion finishes
ISR (ADC_vect){
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
	cli(); // Clear Interrupts
  a2:	f8 94       	cli
	setPWM(ADCH);
  a4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	OCR0A = 0; // Set TOP value to 0
}

// Sets the TOP register's value
void setPWM(int value){
	OCR0A = value;
  a8:	87 bd       	out	0x27, r24	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	8f e9       	ldi	r24, 0x9F	; 159
  ac:	9f e0       	ldi	r25, 0x0F	; 15
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <__vector_21+0x1a>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <__vector_21+0x20>
  b4:	00 00       	nop
// Sets the PWM duty cycle to the value of the ADC0, when every conversion finishes
ISR (ADC_vect){
	cli(); // Clear Interrupts
	setPWM(ADCH);
	_delay_ms(1);
	sei(); // Set Interrupts
  b6:	78 94       	sei
}
  b8:	9f 91       	pop	r25
  ba:	8f 91       	pop	r24
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <ADCinit>:

void ADCinit(){
	ADMUX = 1 << REFS0; // AVCC with external capacitor at AREF pin, ADC0 selected
  c6:	ec e7       	ldi	r30, 0x7C	; 124
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 e4       	ldi	r24, 0x40	; 64
  cc:	80 83       	st	Z, r24
	ADMUX |= 1<<ADLAR; // ADC Left Adjust Result to use ADCH register for 8-bit operations (ignore 2 Least Significant Bits)
  ce:	80 81       	ld	r24, Z
  d0:	80 62       	ori	r24, 0x20	; 32
  d2:	80 83       	st	Z, r24
	ADCSRA = 1 << ADEN; // Analog to Digital Enable
  d4:	ea e7       	ldi	r30, 0x7A	; 122
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 e8       	ldi	r24, 0x80	; 128
  da:	80 83       	st	Z, r24
	ADCSRA |= 1<<ADATE; // Auto Trigger Enable Conversion
  dc:	80 81       	ld	r24, Z
  de:	80 62       	ori	r24, 0x20	; 32
  e0:	80 83       	st	Z, r24
	ADCSRA |= 1<<ADIE; // ADC Conversion Complete Interrupt activated
  e2:	80 81       	ld	r24, Z
  e4:	88 60       	ori	r24, 0x08	; 8
  e6:	80 83       	st	Z, r24
	ADCSRA |= 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0; // Set prescaler to clk/128
  e8:	80 81       	ld	r24, Z
  ea:	87 60       	ori	r24, 0x07	; 7
  ec:	80 83       	st	Z, r24
	sei(); // Set Interrupts
  ee:	78 94       	sei
	ADCSRA |= 1<<ADSC; // Start Conversions
  f0:	80 81       	ld	r24, Z
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	80 83       	st	Z, r24
  f6:	8f e9       	ldi	r24, 0x9F	; 159
  f8:	9f e0       	ldi	r25, 0x0F	; 15
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <ADCinit+0x34>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <ADCinit+0x3a>
 100:	00 00       	nop
 102:	08 95       	ret

00000104 <main>:
	_delay_ms(1);
}

int main(void){
	PWMinit();
 104:	0e 94 40 00 	call	0x80	; 0x80 <PWMinit>
	ADCinit();
 108:	0e 94 63 00 	call	0xc6	; 0xc6 <ADCinit>
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	08 95       	ret

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
