
BlinkingTest2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000224  000002b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000224  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000002ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d3  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070c  00000000  00000000  00000c47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000391  00000000  00000000  00001353  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  000016e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d4  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000207  00000000  00000000  00001b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001d63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 c0 00 	jmp	0x180	; 0x180 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 83 00 	call	0x106	; 0x106 <main>
  9e:	0c 94 10 01 	jmp	0x220	; 0x220 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <PortInit>:

int smallDelay=1;
int extraTime=0;

void PortInit(void){
	DDRB = 0x0D;
  a6:	8d e0       	ldi	r24, 0x0D	; 13
  a8:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x0D;
  aa:	85 b9       	out	0x05, r24	; 5
	DDRB = 1<<PORTB1 | 1<< PORTB2 | 1<<PORTB3;
  ac:	8e e0       	ldi	r24, 0x0E	; 14
  ae:	84 b9       	out	0x04, r24	; 4
	PORTB = 1<<PORTB1 | 1<< PORTB2 | 1<<PORTB3;
  b0:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	8d e3       	ldi	r24, 0x3D	; 61
  b6:	99 e4       	ldi	r25, 0x49	; 73
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <PortInit+0x12>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <PortInit+0x1c>
  c2:	00 00       	nop
	_delay_ms(1500);
	PORTD = 0x04;
  c4:	84 e0       	ldi	r24, 0x04	; 4
  c6:	8b b9       	out	0x0b, r24	; 11
	EIMSK = (1<<INT0);
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	8d bb       	out	0x1d, r24	; 29
	EICRA = 0<<ISC01 | 0<<ISC00;	// Trigger INT0 on Low
  cc:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
  d0:	08 95       	ret

000000d2 <WDT_Init>:
}

void WDT_Init(void){
	// Clear the reset flag, the WDRF bit (bit 3) of MCUSR.
	MCUSR = MCUSR & 0xF7;
  d2:	84 b7       	in	r24, 0x34	; 52
  d4:	87 7f       	andi	r24, 0xF7	; 247
  d6:	84 bf       	out	0x34, r24	; 52
	// of WDTCSR. The WDCE bit must be set in order to
	// change WDE or the watchdog prescalers. Setting the
	// WDCE bit will allow updates to the prescalers and
	// WDE for 4 clock cycles then it will be reset by
	// hardware.
	WDTCSR = WDTCSR | 0x18;
  d8:	e0 e6       	ldi	r30, 0x60	; 96
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	88 61       	ori	r24, 0x18	; 24
  e0:	80 83       	st	Z, r24

	// Set the watchdog timeout prescaler value to 1024 K
	// which will yield a time-out interval of about 8.0 s.
	WDTCSR = 0x21;
  e2:	81 e2       	ldi	r24, 0x21	; 33
  e4:	80 83       	st	Z, r24

	// Enable the watchdog timer interrupt.
	WDTCSR = WDTCSR | 0x40;
  e6:	80 81       	ld	r24, Z
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	80 83       	st	Z, r24
	MCUSR = MCUSR & 0xF7;
  ec:	84 b7       	in	r24, 0x34	; 52
  ee:	87 7f       	andi	r24, 0xF7	; 247
  f0:	84 bf       	out	0x34, r24	; 52
  f2:	08 95       	ret

000000f4 <TimerCounterInit>:
}

void TimerCounterInit(void){
	TCCR0A = 1<<WGM01; //Sets timer counter mode of operation (CTC - Clear timer on compare)
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	84 bd       	out	0x24, r24	; 36
	OCR0A = 195;  // Number of real clock ticks
  f8:	93 ec       	ldi	r25, 0xC3	; 195
  fa:	97 bd       	out	0x27, r25	; 39
	TIMSK0  = 1<<OCIE0A; // Timer/Counter0 output compare match a interrupt enable
  fc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	TCCR0B = 1<<CS02 | 1<<CS00;  // CLKio /1024 (prescaler)
 100:	85 e0       	ldi	r24, 0x05	; 5
 102:	85 bd       	out	0x25, r24	; 37
 104:	08 95       	ret

00000106 <main>:
}

int main(void){
	PortInit();
 106:	0e 94 53 00 	call	0xa6	; 0xa6 <PortInit>
	WDT_Init();
 10a:	0e 94 69 00 	call	0xd2	; 0xd2 <WDT_Init>
	TimerCounterInit();
 10e:	0e 94 7a 00 	call	0xf4	; 0xf4 <TimerCounterInit>
	sei();
 112:	78 94       	sei
    while (1){
		PORTB = (1<<PORTB1);
 114:	22 e0       	ldi	r18, 0x02	; 2
 116:	25 b9       	out	0x05, r18	; 5
		if(smallDelay==1)
 118:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 11c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	51 f4       	brne	.+20     	; 0x138 <main+0x32>
 124:	3f ef       	ldi	r19, 0xFF	; 255
 126:	80 e7       	ldi	r24, 0x70	; 112
 128:	92 e0       	ldi	r25, 0x02	; 2
 12a:	31 50       	subi	r19, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0x24>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x2e>
 134:	00 00       	nop
 136:	09 c0       	rjmp	.+18     	; 0x14a <main+0x44>
 138:	3f ef       	ldi	r19, 0xFF	; 255
 13a:	83 ec       	ldi	r24, 0xC3	; 195
 13c:	99 e0       	ldi	r25, 0x09	; 9
 13e:	31 50       	subi	r19, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0x38>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x42>
 148:	00 00       	nop
			_delay_ms(50);
		else
			_delay_ms(200);
		PORTB = (0<<PORTB1);
 14a:	15 b8       	out	0x05, r1	; 5
		if(smallDelay==1)
 14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 150:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	51 f4       	brne	.+20     	; 0x16c <main+0x66>
 158:	3f ef       	ldi	r19, 0xFF	; 255
 15a:	80 e7       	ldi	r24, 0x70	; 112
 15c:	92 e0       	ldi	r25, 0x02	; 2
 15e:	31 50       	subi	r19, 0x01	; 1
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0x58>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x62>
 168:	00 00       	nop
 16a:	d5 cf       	rjmp	.-86     	; 0x116 <main+0x10>
 16c:	3f ef       	ldi	r19, 0xFF	; 255
 16e:	83 ec       	ldi	r24, 0xC3	; 195
 170:	99 e0       	ldi	r25, 0x09	; 9
 172:	31 50       	subi	r19, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <main+0x6c>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0x76>
 17c:	00 00       	nop
 17e:	cb cf       	rjmp	.-106    	; 0x116 <main+0x10>

00000180 <__vector_1>:
		else
			_delay_ms(200);
	}
}

ISR(INT0_vect){
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	2f 93       	push	r18
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
	if(smallDelay==1)
 190:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 194:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	29 f4       	brne	.+10     	; 0x1a6 <__vector_1+0x26>
	smallDelay=0;
 19c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 1a0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 1a4:	06 c0       	rjmp	.+12     	; 0x1b2 <__vector_1+0x32>
	else
	smallDelay=1;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	cli();
 1b2:	f8 94       	cli
	wdt_reset();
 1b4:	a8 95       	wdr
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	89 e6       	ldi	r24, 0x69	; 105
 1ba:	98 e1       	ldi	r25, 0x18	; 24
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <__vector_1+0x3c>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <__vector_1+0x46>
 1c6:	00 00       	nop
	_delay_ms(500);
	sei();
 1c8:	78 94       	sei
}
 1ca:	9f 91       	pop	r25
 1cc:	8f 91       	pop	r24
 1ce:	2f 91       	pop	r18
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <__vector_14>:

ISR(TIMER0_COMPA_vect){
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
	 extraTime++;
 1e8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1ec:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1f0:	01 96       	adiw	r24, 0x01	; 1
	 
	 if(extraTime > 100)
 1f2:	85 36       	cpi	r24, 0x65	; 101
 1f4:	91 05       	cpc	r25, r1
 1f6:	2c f4       	brge	.+10     	; 0x202 <__vector_14+0x28>
	_delay_ms(500);
	sei();
}

ISR(TIMER0_COMPA_vect){
	 extraTime++;
 1f8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 1fc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 200:	08 c0       	rjmp	.+16     	; 0x212 <__vector_14+0x38>
	 
	 if(extraTime > 100)
	 {
		 extraTime = 0;
 202:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 206:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
		 PORTB ^= (1 << PORTB3);
 20a:	95 b1       	in	r25, 0x05	; 5
 20c:	88 e0       	ldi	r24, 0x08	; 8
 20e:	89 27       	eor	r24, r25
 210:	85 b9       	out	0x05, r24	; 5
	 }
}
 212:	9f 91       	pop	r25
 214:	8f 91       	pop	r24
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <_exit>:
 220:	f8 94       	cli

00000222 <__stop_program>:
 222:	ff cf       	rjmp	.-2      	; 0x222 <__stop_program>
